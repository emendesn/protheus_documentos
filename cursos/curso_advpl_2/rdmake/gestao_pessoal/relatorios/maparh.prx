/*--------------------------------------------------------------------------------------------------------------------------------------------------------+
|Programa: MapaRH                                                                                                                                         |
|Autor:                                                                                                                                                   |
|Data Aplicação:                                                                                                                                          |
|Descrição: relatório MAPA RH                                                                                                                             |
+---------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 08/04/2013                                                                                                                               |
|Motivo: Inclusão Filtro por Filial                                                                                                                       |
|Resposável: Anadi                                                                                                                                        |
|Validado por: Danielhe                                                                                                                                   |
+--------------------------------------------------------------------------------------------------------------------------------------------------------*/

#Include "PROTHEUS.CH"
#INCLUDE "topconn.ch" 

//------------------------------------------------------------------------------------------------------------------------------------------------------------
User Function MapaRH()    //Relatorios\Customizados\MapaRH    
PRIVATE cPerg := "MAPARH"
ValidPerg(cPerg) 

if ! Pergunte(cPerg,.T.)
 Return()
Endif

Processa( { || MyRel() } ) 
Return .t.                     
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function MyRel()                 
	Local cQry1 :=""
	Local cCrLf:=Chr(13)+Chr(10)
	Local cMesAnoRef
	Local dInicio := MV_PAR03
	Local dFim := MV_PAR04
	Local dDtPesqAf
	Local aTotCC := {}

	Local yy := 0
	Local cTipAfas    := " "
	Local aXAfast := {}
	Local nTur
	Local nAfasta := nFerias := 0

//	Local cArquivo := CriaTrab(,.F.)
	Local _csrvapl := ALLTRIM(GetMV("MV_SERVAPL"))
	Local _cArqTmp := lower(AllTrim(__RELDIR)+"MapaRH.csv") //Local _cArqTmp := lower(AllTrim(__RELDIR)+alltrim(cArquivo)+".csv")
	Local Matricula1 := " "
	Local Matricula2 := " "
	dDataRef := MV_PAR03      
	cMesAnoRef := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
	Private dPerIni := CTOD("")
	Private dPerFim := CTOD("")
	Private aMarcFun   := {}
	Private aTabPadrao := {}
	Private aTabCalend := {}
	Private aMarcacoes := {}
	Private nPosMarc   := 0 
	Private nLenMarc   := 0
	Private nMax       := 0
	Private Nachou     := 0
	Private ZZ         := 0
	Private aHorasP    := {}
	Private xExtra     := 0                  
	Private axFalta    :={}
	Private cAnoMesRef    := Right(cMesAnoRef,4) + Left(cMesAnoRef,2)

	dDtPesqAf:= CTOD("01/" + Right(cAnoMesRef,2) + "/" + Left(cAnoMesRef,4),"DDMMYY")
	
	nHandle := MsfCreate(_cArqTmp,0)
	
	cLinha := "TOTAL DE HORAS TRABALHADAS. PERÍODO DE " + StrZero(Day(MV_PAR03),2) + "/" + StrZero(Month(MV_PAR03),2) + "/" + StrZero(Year(MV_PAR03),4) + " A " + StrZero(Day(MV_PAR04),2) + "/" + StrZero(Month(MV_PAR04),2) + "/" + StrZero(Year(MV_PAR04),4)
	fWrite(nHandle, cLinha  + cCrLf)
	cLinha := ' '                   
	fWrite(nHandle, cLinha  + cCrLf)
	
	DbSelectArea("SP3") //FERIADOS
	DbSetOrder(1)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
	IF Select("QRY1") <> 0 
		DbSelectArea("QRY1")
		DbCloseArea()
	Endif   
		cQuery := " SELECT RA_FILIAL, RA_MAT, RA_CC, RA_NOME, RA_DEMISSA, RA_TPCONTR, RA_ADMISSA, RA_TNOTRAB, RA_SEQTURN, RA_DEFIFIS, RA_CATEG, RA_CATFUNC FROM SRA020 SRA "
		cQuery += " WHERE D_E_L_E_T_ = '' "
		cQuery += "	AND NOT SRA.RA_CATFUNC in ('A','P') "
		cQuery += "	AND SRA.RA_FILIAL BETWEEN '"+MV_PAR01+"' AND '"+MV_PAR02+"' "
		cQuery += "	AND SRA.RA_ADMISSA <= '" + DTOS(MV_PAR04) + "' " 
		cQuery += "	AND (SRA.RA_DEMISSA = '' OR SRA.RA_DEMISSA >= '" + DTOS(MV_PAR03) + "') "
		cQuery += "	AND SRA.RA_CC BETWEEN '"+MV_PAR05+"' AND '"+MV_PAR06+"' "
		cQuery += "	AND SRA.RA__CELULA BETWEEN '"+MV_PAR07+"' AND '"+MV_PAR08+"' "
		cQuery += " ORDER BY RA_FILIAL,RA_CC,RA_NOME"

		MEMOWRITE("C:\TESTE.txt",cQuery)
		
		TCQUERY cQuery NEW ALIAS "QRY1"

TCqUERY "SELECT PJ_TURNO , (PJ_HRSTRAB+PJ_HRSTRA2) AS HORAS FROM SPJ020 WHERE PJ_DIA = 2 AND PJ_SEMANA = '01' AND D_E_L_E_T_ = ' ' ORDER BY PJ_TURNO" NEW ALIAS "TMPHR"

DBSELECTAREA("QRY1")     
procregua(reccount())
QRY1->(DBGOTOP())   
DO WHILE !QRY1->(EOF())

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao considera funcionarios admitidos apos o periodo do movimento ³
	//³ e nem os demitidos anterior ao periodo.						     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If MesAno(stod(QRY1->RA_ADMISSA)) <= MesAno(dDtPesqAf) .and. (Empty(QRY1->RA_DEMISSA) .or. MesAno(stod(QRY1->RA_DEMISSA)) >= MesAno(dDtPesqAf))
		yy := Ascan(aTotCC , {|x| x[1] =  QRY1->RA_CC })
		If yy = 0                                       
			SI3->(MsSeek(Xfilial("SI3") + QRY1->RA_CC))
			aadd (aTotCC,;	 
			{QRY1->RA_CC,;	//01 CENTRO DE CUSTO
			0,;		 		//02 FUNCIONÁRIOS AFASTADOS INSS
			0,;		 		//03 HORAS PREVISTAS
			0,;		 		//04 FUNCIONARIOS EM FERIAS
			0,;		 		//05 HORAS EXTRAS
			0,;		 		//06 HORAS FALTAS/ATRASOS TOTAL
			0,;		 		//07 HORAS EM TREINAMENTO
			0,;		 		//08 TOTAL DE FUNCIONÁRIOS (ANTERIOR)
			0,;		 		//09 ADMITIDO
			0,;		 		//10 DEMITIDO
			0,;		 		//11 HORAS EM FERIAS
			SI3->I3_DESC,;	//12 DESCRIÇÃO CENTRO DE CUSTO
			0,;		 		//13 HORAS AFASTAMENTO INSS
			0,;		 		//14 HORAS FALTAS/ATRASOS DESCONTADO
			0,;		 		//15 HORAS FALTAS/ATRASOS ABONADO
			0,;		 		//16 HORAS EFETIVAS
			0,;		 		//17 FUNCIONÁRIOS PCD
			0,;		 		//18 APRENDIZ SENAI
			0,;		 		//19 APRENDIZ PRO-JOVEM
			0,;		 		//20 TEMPORÁRIO
			0,;		 		//21 V.R. EMPRESA
			0,;		 		//22 V.T. EMPRESA
			0,;		 		//23 ASS.MÉDICA EMPRESA
			0,;		 		//24 % ABSENTEÍSMO
			0,;		 		//25 HORAS AFASTAMENTO MATERNIDADE
			0})
		Endif 
		yy := Ascan(aTotCC , {|x| x[1] == QRY1->RA_CC })

        If stod(QRY1->RA_ADMISSA) >= MV_PAR03 .And. stod(QRY1->RA_ADMISSA) <= MV_PAR04 //If mesano(stod(QRY1->RA_ADMISSA)) == MesAno(dDtPesqAf)
        	aTotCC[yy,9] += 1 //ADMITIDO
        Endif
        
 		If (stod(QRY1->RA_DEMISSA)) >= MV_PAR03 .And. (stod(QRY1->RA_DEMISSA)) <= MV_PAR04 //MesAno(stod(QRY1->RA_DEMISSA)) = MesAno(dDtPesqAf)) //demitidos
			cTipAfas := "D"
			aTotCC[yy,10] += 1 //DEMITIDO
		EndIf
        
 		If QRY1->RA_DEFIFIS = "1"
			aTotCC[yy,17] += 1 //FUNCIONÁRIOS PCD
		EndIf

 		If QRY1->RA_CATEG = "07"
			aTotCC[yy,18] += 1 //APRENDIZ SENAI
		EndIf

 		If QRY1->RA_MAT >= "900000" .AND. QRY1->RA_MAT <= "999999" .AND. QRY1->RA_CATFUNC = "T"
			aTotCC[yy,20] += 1 //TEMPORÁRIO
		EndIf

 		If QRY1->RA_MAT >= "900000" .AND. QRY1->RA_MAT <= "999999" .AND. QRY1->RA_CATFUNC <> "T"
			aTotCC[yy,19] += 1 //APRENDIZ PRO-JOVEM
		EndIf

		aTotCC[yy,21] += rVALOR({"788"}) //V.R. EMPRESA
		aTotCC[yy,22] += rVALOR({"786"}) //V.T. EMPRESA
		aTotCC[yy,23] += rVALOR({"725","726","789"}) //ASS.MÉDICA EMPRESA

			DbSelectArea("SR8")

			If SR8->(DbSeek(Xfilial("SR8") + QRY1->RA_MAT ))
//			aTotMAT[yy,22] := ""

				While !Eof() .And. QRY1->RA_FILIAL + QRY1->RA_MAT == SR8->R8_FILIAL + SR8->R8_MAT
						dinifer := MV_PAR03 //FIRSTDAY(MV_PAR04 + 30)
						dfimfer := MV_PAR04 //LASTDAY(MV_PAR04 + 30)                                                
							
						If SR8->R8_TIPO $ 'O/P/Q' .and. SR8->R8_DATAFIM >= dinifer .and. SR8->R8_DATAINI <= dfimfer
							nAfasta := 0
							If SR8->R8_TIPO $ 'O/P' .and. (SR8->R8_DATAFIM - SR8->R8_DATAINI) >= 15 
									If SR8->R8_DATAINI+15 <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//afastamento comecou antes do mes de calculo e acabou no mes de calculo
											nAfasta += xafasta(dInifer,SR8->R8_DATAFIM)
									   		cTipAfas := "A"
										Elseif SR8->R8_DATAINI+15 <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//afastamento comecou antes do mes de calculo e acabou depois do mes de calculo
											nAfasta += xafasta(dInifer,dfimfer)
											cTipAfas := "A"
			            				ElseIf SR8->R8_DATAINI+15 >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //afastamento está no mes de calculo
											nAfasta += xafasta(SR8->R8_DATAINI+15,SR8->R8_DATAFIM)
											cTipAfas := "A"
										ElseIf SR8->R8_DATAINI+15 >= dinifer .and. SR8->R8_DATAINI+14 <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //afastamento comecou no mes de calculo e acabou depois
											nAfasta += xafasta(SR8->R8_DATAINI+15,dfimfer)
											cTipAfas := "A"
									EndIf
								ElseIf SR8->R8_TIPO $ 'Q'
									If SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//afastamento comecou antes do mes de calculo e acabaram no mes de calculo											
									   		nAfasta += xafasta(dInifer,SR8->R8_DATAFIM)
									   		cTipAfas := "Q"
										Elseif SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//afastamento comecou antes do mes de calculo e acabaram depois do mes de calculo											
											nAfasta += xafasta(dInifer,dfimfer)
											cTipAfas := "Q"
			            				ElseIf SR8->R8_DATAINI >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //afastamento estao no mes de calculo
											nAfasta += xafasta(SR8->R8_DATAINI,SR8->R8_DATAFIM)
											cTipAfas := "Q"
										ElseIf SR8->R8_DATAINI >= dinifer .and. SR8->R8_DATAINI <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //afastamento comecou no mes de calculo e acabaram depois
											nAfasta += xafasta(SR8->R8_DATAINI,dfimfer)
											cTipAfas := "Q"
									EndIf
	                        EndIf

							If cTipAfas == 'A' .or. cTipAfas == 'Q'
								Matricula1 := QRY1->RA_MAT
								If Matricula1 <> Matricula2
									aTotCC[yy,2] += 1 //FUNCIONÁRIOS AFASTADOS INSS
									Matricula2 := SR8->R8_MAT
								EndIf
								IIf (cTipAfas == 'A',aTotCC[yy,13] := SomaHoras(aTotCC[yy,13],ConvHr(nAfasta,TMPHR->HORAS)),) //HORAS AFASTAMENTO INSS
								IIf (cTipAfas == 'Q',aTotCC[yy,25] := SomaHoras(aTotCC[yy,25],ConvHr(nAfasta,TMPHR->HORAS)),) //HORAS AFASTAMENTO MATERNIDADE
							EndIf							
                        EndIf

						If SR8->R8_TIPO $ 'F'
							nFerias := 0
							if SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//as ferias comecaram antes do mes de calculo e acabaram no mes de calculo
							   		nFerias += xafasta(dInifer,SR8->R8_DATAFIM)
							   		cTipAfas := "F"
								Elseif SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//as ferias comecaram antes do mes de calculo e acabaram depois do mes de calculo
								   		nFerias += xafasta(dInifer,dfimfer)
								   		cTipAfas := "F"
	            				ElseIf SR8->R8_DATAINI >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //as ferias estao no mes de calculo
									nFerias += xafasta(SR8->R8_DATAINI,SR8->R8_DATAFIM)               //29                               
									cTipAfas := "F"
								ElseIf SR8->R8_DATAINI >= dinifer .and. SR8->R8_DATAINI <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //as ferias comecaram no mes de calcule e acabaram depois do mes de calculo
										nFerias += xafasta(SR8->R8_DATAINI,dfimfer)
										cTipAfas := "F"
								Else //as ferias estao fora do periodo de calculo		
									nFerias += 0       
								cTipAfas := " "
							EndIf

							If cTipAfas == 'F'
								aTotCC[yy,4]  += 1 //FUNCIONARIOS EM FERIAS
								aTotCC[yy,11] := SomaHoras(aTotCC[yy,11],ConvHr(nFerias,TMPHR->HORAS)) //HORAS EM FERIAS
							EndIf
				    	EndIf

						DbSelectArea("SR8")
						DbSkip()
				Enddo
		DbSelectArea("QRY1")
        
		Else
		  	dbSelectArea( "QRY1" )
	Endif
//		testa eventos abonados do ponto eletronico - FALTAS, ATRASOS ETC*/
		aMarcacoes	:= {}
		aTabCalend	:= {}	
		axFalta     := {}
		//adet:= TestaPonto()

		If (stod(QRY1->RA_ADMISSA)) < MV_PAR03
			aTotCC[yy,8]   += 1  //TOTAL DE FUNCIONÁRIOS (ANTERIOR)
		EndIf
		
		aTotCC[yy,3]   := SomaHoras(aTotCC[yy,3],HrUtil(MV_PAR03,MV_PAR04))  //HORAS PREVISTAS
		aTotCC[yy,14]  := SomaHoras(aTotCC[yy,14],getFaltas(QRY1->RA_MAT,.F.)) //HORAS FALTAS/ATRASOS DESCONTADO
		aTotCC[yy,15]  := SomaHoras(aTotCC[yy,15],getFaltas(QRY1->RA_MAT,.T.)) //HORAS FALTAS/ATRASOS ABONADO
		aTotCC[yy,7]   := SomaHoras(aTotCC[yy,7],getTreina(QRY1->RA_MAT))  //HORAS EM TREINAMENTO
		dbSelectArea( "QRY1" )
		ATotCC[yy,5] := SomaHoras(ATotCC[yy,5],getHe(QRY1->RA_MAT)) //HORAS EXTRAS
		
/* ---------------------------- fim do ponto eletronico*/
	ENDIF
	
	QRY1->(DbSkip())
	Incproc()
EndDo
ASORT(aTotCC,,, { |x, y| x[1] < y[1] })
zz := 0
nMax := Len(aTotCC)
ProcRegua(nMax)

clinha = "CÓDIGO"							+";"+ ; 
		 "CENTRO DE CUSTO"					+";"+ ; 
		 "TOTAL DE FUNCIONÁRIOS (ANTERIOR)"	+";"+ ;
		 "ADMITIDO"							+";"+ ;
		 "DEMITIDO"							+";"+ ; 
		 "TOTAL DE FUNCIONÁRIOS (ATUAL)"	+";"+ ; 
		 "FUNCIONÁRIOS EM FERIAS"			+";"+ ; 
		 "FUNCIONÁRIOS AFASTADOS INSS"		+";"+ ;
		 "FUNCIONÁRIOS PCD"					+";"+ ;
		 "APRENDIZ SENAI"					+";"+ ;
		 "APRENDIZ PRO-JOVEM"				+";"+ ;
		 "TEMPORÁRIO"						+";"+ ;
		 "V.R. EMPRESA"						+";"+ ;
		 "V.T. EMPRESA"						+";"+ ;
		 "ASS.MÉDICA EMPRESA"				+";"+ ;
		 "HORAS PREVISTAS"					+";"+ ;
		 "HORAS EM FERIAS"					+";"+ ; 
		 "HORAS DISPONIVEIS"				+";"+ ; 
		 "HORAS EXTRAS"						+";"+ ; 
		 "HORAS FALTAS/ATRASOS TOTAL"		+";"+ ;
		 "HORAS TREINAMENTO"				+";"+ ; 
		 "HORAS AFASTAMENTO INSS"			+";"+ ; 
		 "HORAS AFASTAMENTO MATERNIDADE"	+";"+ ; 
		 "HORAS EFETIVAS"					+";"+ ; 
		 "HORAS PAGAS"						+";"+ ; 
		 "% ABSENTEÍSMO"

fWrite(nHandle, cLinha  + cCrLf)

cTot2 := cTot3 := cTot4 := cTot5 := cTot6 := cTot7 := cTot8 := cTot9 := cTot10 := cTot11 := cTot13 := cTot14 := cTot15 := cTot16 := cTot17 := cTot18 := cTot19 := cTot20 := cTot21 := cTot22 := cTot23 := cTot25 := cTotFUN := cTotDisp := cTotPG := cTotAB := 0

For zz = 1 to nMax       
		cLinha := Alltrim(aTotcc[zz,1]) + ';' + Alltrim(aTotcc[zz,12]) + ';'															//CENTRO DE CUSTO + DESCRIÇÃO CENTRO DE CUSTO
		clinha = clinha + transform(aTotcc[zz,8],"@E 999999") + ';'																		//TOTAL DE FUNCIONÁRIOS (ANTERIOR)
		cTot8 += aTotcc[zz,8]
		clinha = clinha + transform(aTotcc[zz,9],"@E 999999") + ';'																		//ADMITIDO
		cTot9 += aTotcc[zz,9]
		clinha = clinha + transform(aTotcc[zz,10],"@E 999999") + ';'																	//DEMITIDO
		cTot10 += aTotcc[zz,10]
		clinha = clinha + transform(aTotcc[zz,8]+aTotcc[zz,9]-aTotcc[zz,10],"@E 999999") + ';'											//TOTAL DE FUNCIONÁRIOS (ATUAL)
		cTotFUN += aTotcc[zz,8]+aTotcc[zz,9]-aTotcc[zz,10]
		clinha = clinha + transform(aTotcc[zz,4],"@E 999999") + ';'																		//FUNCIONARIOS EM FERIAS 
		cTot4 += aTotcc[zz,4]
		clinha = clinha + transform(aTotcc[zz,2],"@E 999999") + ';' 																	//FUNCIONÁRIOS AFASTADOS INSS
		cTot2 += aTotcc[zz,2]
		clinha = clinha + transform(aTotcc[zz,17],"@E 999999") + ';'																	//FUNCIONÁRIOS PCD
		cTot17 += aTotcc[zz,17]
		clinha = clinha + transform(aTotcc[zz,18],"@E 999999") + ';'																	//APRENDIZ SENAI
		cTot18 += aTotcc[zz,18]
		clinha = clinha + transform(aTotcc[zz,19],"@E 999999") + ';'																	//APRENDIZ PRO-JOVEM
		cTot19 += aTotcc[zz,19]
		clinha = clinha + transform(aTotcc[zz,20],"@E 999999") + ';'																	//TEMPORÁRIO
		cTot20 += aTotcc[zz,20]
		clinha = clinha + Alltrim(transform(aTotcc[zz,21],"@E 9,999,999.99")) + ";"														// V.R. EMPRESA
		cTot21 += aTotcc[zz,21]
		clinha = clinha + Alltrim(transform(aTotcc[zz,22],"@E 9,999,999.99")) + ";"														// V.T. EMPRESA
		cTot22 += aTotcc[zz,22]
		clinha = clinha + Alltrim(transform(aTotcc[zz,23],"@E 9,999,999.99")) + ";"														// ASS.MÉDICA EMPRESA
		cTot23 += aTotcc[zz,23]
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,3],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,3],10,2),2)) + ';'	 	//HORAS PREVISTAS
		cTot3 := SomaHoras(aTotcc[zz,3],cTot3)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,11],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,11],10,2),2)) + ';' 	//HORAS EM FERIAS
		cTot11 := SomaHoras(aTotcc[zz,11],cTot11)
        nHDisp := SomaHoras(aTotcc[zz,3],'-'+AllTrim(Str(aTotcc[zz,11])))
		clinha = clinha + Alltrim(Left(Transform(nHDisp,"@E 999999.99"),6) + ":" + Right(StrZero(nHDisp,10,2),2)) + ';'					//HORAS DISPONIVEIS
		cTotDISP := SomaHoras(nHDisp,cTotDISP)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,5],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,5],10,2),2)) + ';'		//HORAS EXTRAS
		cTot5 := SomaHoras(aTotcc[zz,5],cTot5)
		nHFalta := SomaHoras(SomaHoras(aTotCC[zz,15],aTotCC[zz,14]),aTotCC[zz,7])
		Iif (nHFalta <= nHDisp , aTotCC[zz,6] := nHFalta , aTotCC[zz,6] := nHDisp)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,6],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,6],10,2),2)) + ';'		//HORAS FALTAS/ATRASOS TOTAL
		cTot6 := SomaHoras(aTotCC[zz,6],cTot6)
//		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,15],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,15],10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS ABONADO
		cTot15 := SomaHoras(aTotcc[zz,15],cTot15)
		Iif (aTotCC[zz,14] >= nHDisp , aTotCC[zz,14] := nHDisp,)
//		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,14],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,14],10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS DESCONTADO
		cTot14 := SomaHoras(aTotcc[zz,14],cTot14)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,7],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,7],10,2),2)) + ';'		//HORAS EM TREINAMENTO
		cTot7 := SomaHoras(aTotcc[zz,7],cTot7)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,13],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,13],10,2),2)) + ';' 	//HORAS AFASTAMENTO INSS
		cTot13 := SomaHoras(aTotcc[zz,13],cTot13)
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,25],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,25],10,2),2)) + ';' 	//HORAS AFASTAMENTO MATERNIDADE
		cTot25 := SomaHoras(aTotcc[zz,25],cTot25)
		aTotCC[zz,16] := SomaHoras(SomaHoras(SomaHoras(aTotcc[zz,3],'-'+AllTrim(Str(aTotcc[zz,11]))),aTotcc[zz,5]),'-'+AllTrim(Str(SomaHoras(aTotcc[zz,6],(SomaHoras(aTotcc[zz,13],aTotcc[zz,25])))))) //[zz,3]HORAS PREVISTAS - [zz,11]HORAS EM FERIAS - [zz,5]HORAS EXTRAS - [zz,6]HORAS FALTAS/ATRASOS TOTAL - [zz,13]HORAS AFASTAMENTO INSS
		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,16],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,16],10,2),2)) + ';' 	//HORAS EFETIVAS
		cTot16 := SomaHoras(aTotcc[zz,16],cTot16)
		nHPagas := SomaHoras(aTotCC[zz,16],aTotcc[zz,15])
		clinha = clinha + Alltrim(Left(Transform(nHPagas,"@E 999999.99"),6) + ":" + Right(StrZero(nHPagas,10,2),2)) + ';'				//HORAS PAGAS
		cTotPG := SomaHoras(nHPagas,cTotPG)
		nHAbse := (SomaHoras(SomaHoras(aTotcc[zz,6],aTotcc[zz,7]),aTotcc[zz,13]))/nHDisp*100
		clinha = clinha + Transform(nHAbse,"@E 999.99") + ';'																			//% ABSENTEÍSMO
		cTotAB := (cTot6+cTot7+cTot13)/cTotDISP*100
	fWrite(nHandle, cLinha  + cCrLf)
//	IncProc()
Next         
		cLinha := "TOTAIS" + ';' + "" + ';'																					//CENTRO DE CUSTO + DESCRIÇÃO CENTRO DE CUSTO
		clinha = clinha + transform(cTot8,"@E 999999") + ';'																//TOTAL DE FUNCIONÁRIOS (ANTERIOR)
		clinha = clinha + transform(cTot9,"@E 999999") + ';'																//ADMITIDO
		clinha = clinha + transform(cTot10,"@E 999999") + ';'																//DEMITIDO
		clinha = clinha + transform(cTotFUN,"@E 999999") + ';'																//TOTAL DE FUNCIONÁRIOS (ATUAL)
		clinha = clinha + transform(cTot4,"@E 999999") + ';'																//FUNCIONARIOS EM FERIAS 
		clinha = clinha + transform(cTot2,"@E 999999") + ';' 																//FUNCIONÁRIOS AFASTADOS INSS
		clinha = clinha + transform(cTot17,"@E 999999") + ';'																//FUNCIONÁRIOS PCD
		clinha = clinha + transform(cTot18,"@E 999999") + ';'																//APRENDIZ SENAI
		clinha = clinha + transform(cTot19,"@E 999999") + ';'																//APRENDIZ PRO-JOVEM
		clinha = clinha + transform(cTot20,"@E 999999") + ';'																//TEMPORÁRIO
		clinha = clinha + Alltrim(transform(cTot21,"@E 9,999,999.99")) + ";"												// V.R. EMPRESA
		clinha = clinha + Alltrim(transform(cTot22,"@E 9,999,999.99")) + ";"												// V.T. EMPRESA
		clinha = clinha + Alltrim(transform(cTot23,"@E 9,999,999.99")) + ";"												// ASS.MÉDICA EMPRESA
		clinha = clinha + Alltrim(Left(Transform(cTot3,"@E 999999.99"),6) + ":" + Right(StrZero(cTot3,10,2),2)) + ';'	 	//HORAS PREVISTAS
		clinha = clinha + Alltrim(Left(Transform(cTot11,"@E 999999.99"),6) + ":" + Right(StrZero(cTot11,10,2),2)) + ';' 	//HORAS EM FERIAS
		clinha = clinha + Alltrim(Left(Transform(cTotDISP,"@E 999999.99"),6) + ":" + Right(StrZero(cTotDISP,10,2),2)) + ';'	//HORAS DISPONIVEIS
		clinha = clinha + Alltrim(Left(Transform(cTot5,"@E 999999.99"),6) + ":" + Right(StrZero(cTot5,10,2),2)) + ';'		//HORAS EXTRAS
		clinha = clinha + Alltrim(Left(Transform(cTot6,"@E 999999.99"),6) + ":" + Right(StrZero(cTot6,10,2),2)) + ';'		//HORAS FALTAS/ATRASOS TOTAL
//		clinha = clinha + Alltrim(Left(Transform(cTot15,"@E 999999.99"),6) + ":" + Right(StrZero(cTot15,10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS ABONADO
//		Iif (cTot14 >= nHDisp , cTot14 := nHDisp,)
//		clinha = clinha + Alltrim(Left(Transform(cTot14,"@E 999999.99"),6) + ":" + Right(StrZero(cTot14,10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS DESCONTADO
		clinha = clinha + Alltrim(Left(Transform(cTot7,"@E 999999.99"),6) + ":" + Right(StrZero(cTot7,10,2),2)) + ';'		//HORAS EM TREINAMENTO
		clinha = clinha + Alltrim(Left(Transform(cTot13,"@E 999999.99"),6) + ":" + Right(StrZero(cTot13,10,2),2)) + ';' 	//HORAS AFASTAMENTO INSS
		clinha = clinha + Alltrim(Left(Transform(cTot25,"@E 999999.99"),6) + ":" + Right(StrZero(cTot25,10,2),2)) + ';' 	//HORAS AFASTAMENTO MATERNIDADE
//		aTotCC[zz,16] := SomaHoras(SomaHoras(SomaHoras(cTot3,'-'+AllTrim(Str(cTot11))),aTot5),'-'+AllTrim(Str(SomaHoras(cTot6,(SomaHoras(cTot13,aTot25)))))) //[zz,3]HORAS PREVISTAS - [zz,11]HORAS EM FERIAS - [zz,5]HORAS EXTRAS - [zz,6]HORAS FALTAS/ATRASOS TOTAL - [zz,13]HORAS AFASTAMENTO INSS
		clinha = clinha + Alltrim(Left(Transform(cTot16,"@E 999999.99"),6) + ":" + Right(StrZero(cTot16,10,2),2)) + ';' 	//HORAS EFETIVAS
		clinha = clinha + Alltrim(Left(Transform(cTotPG,"@E 999999.99"),6) + ":" + Right(StrZero(cTotPG,10,2),2)) + ';'		//HORAS PAGAS
		clinha = clinha + Transform(cTotAB,"@E 999.99") + ';'					//% ABSENTEÍSMO
	fWrite(nHandle, cLinha  + cCrLf)
	IncProc()
fClose(nHandle)

If ! ApOleClient( 'MsExcel' )
	MsgAlert( 'MsExcel nao instalado')
	Return
Else
    if 'C:' $ __RELDIR        // alterado por Rodrigo Salomão GLPI ID10003
		ShellExecute( "Open" , _cArqTmp ,"", "" , 3 )
	else
		ShellExecute( "Open" , "\\"+_csrvapl+_cArqTmp ,"", "" , 3 )
	endif       
EndIf

Return .T.                                                    

//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion DiaUtil(dDtEntr,dDtSai)
Local nDia:=0
Local nDat:=0
Local nC
Local cDt 
Local nuteis := 0
Local nTur
nDat := dDtSai-dDtEntr

if  dDtEntr < MV_PAR03 //o inicio das ferias foi anterior ao MV_PAR03
	dDtEntr := MV_PAR03 
Endif   

if dDtSai > MV_PAR04 //o fim das ferias passou do MV_PAR04
	dDtSai := MV_PAR04
Endif   
nDat := dDtSai-dDtEntr
dDtEntr:= dDtEntr-1

For nC := 1 To nDat
	cDt:= RetTipoDia(dDtEntr+nC)
	If cDt = "1" //dias trabalhados 
		nuteis ++
	ElseIf cDt = "3" //DSR
		nUteis = nUteis
	ElseIf cDt  = "2" //sabado 

		SPJ->(DbSeek(Xfilial("SPJ") + QRY1->RA_TNOTRAB + QRY1->RA_SEQTURN + "7" ))
		If SPJ->PJ_HRTOTAL > 0	
			nUteis ++
		EndIF	
		SPJ->(DbSeek(Xfilial("SPJ") + QRY1->RA_TNOTRAB + QRY1->RA_SEQTURN + "2" ))	 
	Else 
		nUteis = nUteis								
	EndIf
Next nC

Return(nUteis) 
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function TestaPonto()
Local cAcessaSPC  := &("{ || " + ChkRH("PONR050","SPH","2") + "}")
Local dInicio     := MV_PAR03
Local dFim        := MV_PAR04
Local aAutorizado := {}
Local cCodNAut 	  := "007,009,011,013,017,019,021,033,035,463,461,416,415,414,408" //-- Codigos nao Autorizados
Local cCodAut 	  := "008,010,012,014,018,020,022,032,034" //-- Codigos Autorizados
Local cExtra      := "120,121,122,123,127,128,129,130" //horas extras
Local cCodigos    := ""
Local cFilCompara := SP9->P9_FILIAL       
Local aPrevFun    :={}
aDet              := {}
cCodigos := cCodAut + cCodNAut
DbSelectArea("SP9")
DbSeek(cFilCompara)
aAutorizado       := {}
While ! Eof() .AND. SP9->P9_FILIAL = cFilCompara
	If Subs(P9_IDPON,1,3) $ cCodigos
		Aadd(aAutorizado,{Left(P9_CODIGO,3),P9_DESC})
	Endif
	DbSkip()
EndDo
xExtra :=  0
	//-- Carrega as Marcacoes do Periodo
	IF !GetMarcacoes( @aMarcacoes		,;	//01 -> Marcacoes dos Funcionarios
					  @aTabCalend		,;	//02 -> Calendario de Marcacoes
					  @aTabPadrao		,;	//03 -> Tabela Padrao
					  NIL				,;	//04 -> Turnos de Trabalho
					  dPerIni 			,;	//05 -> Periodo Inicial
					  dPerFim			,;	//06 -> Periodo Final
					  QRY1->RA_FILIAL	,;	//07 -> Filial
					  QRY1->RA_MAT		,;	//08 -> Matricula
					  SRA->RA_TNOTRAB	,;	//09 -> Turno
					  QRY1->RA_SEQTURN	,;	//10 -> Sequencia de Turno
					  QRY1->RA_CC		,;	//11 -> Centro de Custo
					  "SP8"				,;	//12 -> Alias para Carga das Marcacoes
					  .F.    			,;	//13 -> Se carrega Recno em aMarcacoes
					  .T.      			,;	//14 -> Se considera Apenas Ordenadas
					  .T.      			,;	//15 -> Se Verifica as Folgas Automaticas
					  .F.      			,;	//16 -> Se Grava Evento de Folga Automatica Periodo Anterior
					  NIL				,;	//17 -> Se Carrega as Marcacoes Automaticas
					  NIL				,;	//18 -> Registros de Marcacoes Automaticas que deverao ser Desprezadas
					  NIL				,;	//19 -> Bloco para avaliar as Marcacoes Automaticas que deverao ser Desprezadas
					  NIL				,;	//20 -> Se Considera o Periodo de Apontamento das Marcacoes
					  .F.				 ;	//21 -> Se Efetua o Sincronismo dos Horarios na Criacao do Calendario
					)
		Help(' ',1,'PONSCALEND')
    EndIF
	//-- Obtem Qtde de Marcacoes
	nLenMarc:=Len(aMarcacoes)

	aDet := {}

	//1 - Data
	//2 - Codigo do Evento
	//3 - Descricao do Evento
	//4 - Descricao do Abono
	//5 - Descricao do Abono
	//6 - Quantidade de horas Abonadas
	//7 - Marcacoes

	dbSelectArea( "SPH" ) 
	DbSetOrder(2)
	If DbSeek(QRY1->RA_Filial + QRY1->RA_Mat + Dtos(dInicio) )
		While !Eof() .And. SPH->PH_Filial+SPH->PH_Mat == QRY1->RA_filial+QRY1->RA_Mat   .and. SPH->PH_DATA <= dFim

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Consiste controle de acessos e filiais validas               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Eval(cAcessaSPC)
				SPH->(dbSkip())
				Loop
			EndIf

			//-- Verifica o Periodo So	licitado
			If Empty(SPH->PH_DATA) .OR. SPH->PH_DATA < dInicio .OR. SPH->PH_DATA > dFim
				DbSkip()
				Loop
			Endif

		           
			//-- Utiliza o codigo informado qdo houver
			cPD := If(Empty(SPH->PH_PDI),SPH->PH_PD,SPH->PH_PDI)

			//-- Verifica se e um codigo contido na relacao de codigos 
			//-- definidas segundo avariavel cCodigos
			nPos := Ascan(aAutorizado,{ |x| x[1] = cPD })
            //-- Se o Codigo do Evento apontado  eh Valido
			If nPos > 0   
			
				//-- Obtem a quantidade do evento apontando
				xQuant := If(SPH->PH_QUANTI>0,SPH->PH_QUANTI,SPH->PH_QUANTC)
               
				aJustifica := {}
				
				//-- Verifica se existe abonos e posiciona registro de abono
				fAbonos(SPH->PH_DATA, aAutorizados[nPos,1],,@aJustifica,SPH->PH_TPMARCA,SPH->PH_CC)
        						
			    //-- Sintetiza por Evento
				If (nPosDet:=Ascan(aDet,{ |x| x[1] = cPD })) > 0
					aDet[nPosDet,3]:=SomaHoras(aDet[nPosDet,3],xQuant)
			    Else
					aAdd(aDet,{ aAutorizado[nPos,1], aAutorizado[nPos,2] ,	xQuant})
				Endif	              
				If !EMPTY(SPH->PH_ABONO) .AND. SPH->PH_QTABONO > 0 //SOMA EVENTOS ABONADOS
					If Len(aXFalta) >  0
						aXFalta [1,2] += xQuant	
					Else
						aAdd(aXFalta,{0,xQuant})
					Endif		
				Else       //SOMA EVENTOS NAO ABONADOS
					If Len(aXFalta) >  0
						aXFalta [1,1] += xQuant	
					Else
						aAdd(aXFalta,{xQuant,0})
					Endif					  									  
				EndIF
			Else            
				If  cPd $ cExtra
					xExtra += If(SPH->PH_QUANTI>0,SPH->PH_QUANTI,SPH->PH_QUANTC)				
				EndIF			
			Endif
			DbSkip()
		EndDo
	Endif

Return(aDet)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function fChkSX1( dPerIni , dPerFim , cPerg )

Local aAreaSX1	:= SX1->( GetArea() )
Local dVar      := Ctod("//")

SX1->(dbSetOrder(1))

IF SX1->(dbSeek(cPerg+"14",.F.))
	dVar := Ctod(SX1->X1_CNT01,'ddmmyy')
	IF dVar < dPerIni .or. dVar > dPerFim
		RecLock("SX1")
		SX1->X1_CNT01 := Dtoc(dPerIni)
		SX1->( MsUnlock() )
	EndIF
	SX1->( dbSkip() )
	IF SX1->( X1_GRUPO + X1_ORDEM ) == cPerg+"15"
		dVar := Ctod(SX1->X1_CNT01,'ddmmyy')
		IF dVar < dPerIni .Or. dVar > dPerFim
			RecLock("SX1")
			SX1->X1_CNT01 := Dtoc(dPerFim)
			SX1->( MsUnlock() )
		EndIF
	EndIF
EndIF

RestArea( aAreaSX1 )

Return( NIL )
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion HrUtil(dDtEntr,dDtSai)
Local nDia      := 0
Local _nSem     := 1
Local nDat      := 0
Local nUteis    := 0
Local nC
Local cDt 
Local ntothoras := 0
Local _cAno     := Strzero(Year(dDtSai),4)
Local _cMes     := Strzero(Month(dDtSai),2)
Local _Turno	:= QRY1->RA_TNOTRAB //Posicione("SPF",1,"02" + QRY1->RA_MAT + DTOS(MV_PAR03),"PF_TURNOPA") //_dTurno,"PF_TURNOPA")

If STOD(QRY1->RA_ADMISSA) > dDtEntr //admissão dentro do período selecionado
	dDtEntr := STOD(QRY1->RA_ADMISSA)
EndIf

If !eMPTY(QRY1->RA_DEMISSA) .and. STOD(QRY1->RA_DEMISSA) < dDtSai //demissão dentro do período selecionado
	dDtSai := STOD(QRY1->RA_DEMISSA)
EndIf

nDat := dDtSai - dDtEntr + 1

If nDat == 0
   nDat := 1
EndIf

If Posicione("RCG",1, xFilial("RCG") + StrZero(Year(MV_PAR03),4) + StrZero(Month(MV_PAR03),2) + QRY1->RA_TNOTRAB, "RCG->RCG_TNOTRAB") == QRY1->RA_TNOTRAB
	_Turno := QRY1->RA_TNOTRAB
Else
	_Turno := "   "
EndIf

For nC  := 1 To nDat
	cDt := RetTipoDia(dDtEntr + (nC-1))	

			DbSelectArea("RCG")
			DbSetOrder(2)
			DbSeek(xFilial("RCG") + SPACE(LEN(RCG_PROCES)) + SPACE(LEN(RCG_PER)) + SPACE(LEN(RCG_SEMANA)) + SPACE(LEN(RCG_ROTEIR)) + _Turno + DTOS(dDtEntr + (nC-1)),.f.)

			If RCG->RCG_TIPDIA == "1"
				nuteis++
			EndIf

Next nC

	TMPHR->(DBGOTOP())
	WHILE !TMPHR->(eof()) .AND. TMPHR->PJ_TURNO <> QRY1->RA_TNOTRAB
		TMPHR->(DBSKIP())
	ENDDO
	ntothoras := TMPHR->HORAS
	FOR I:=1 TO NUTEIS-1
		NTOTHORAS := SOMAHORAS(NTOTHORAS,TMPHR->HORAS)
	NEXT
	If nUteis < 1
		nTotHoras := 0
	EndIf
Return(nTotHoras) 
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function ValidPerg() //CRIACAO DA PERGUNTA
Local _sAlias := Alias()
Local aRegs := {}
Local i,j

dbSelectArea("SX1")
dbSetOrder(1)
//cPerg := PADR(cPerg,6)
//X1_GRUPO	X1_ORDEM	X1_PERGUNT				X1_PERSPA  		X1_PERENG 		X1_VARIAVL	X1_TIPO	X1_TAMANHO	X1_DECIMAL	X1_PRESEL	X1_GSC	X1_VALID	X1_VAR01	X1_DEF01	X1_DEFSPA1	X1_DEFENG1	X1_CNT01	X1_VAR02	X1_DEF02	X1_DEFSPA2	X1_DEFENG2	X1_CNT02	X1_VAR03	X1_DEF03	X1_DEFSPA3	X1_DEFENG3	X1_CNT03	X1_VAR04	X1_DEF04	X1_DEFSPA4	X1_DEFENG4	X1_CNT04	X1_VAR05	X1_DEF05	X1_DEFSPA5	X1_DEFENG5	X1_CNT05	X1_F3	X1_PYME	X1_GRPSXG	X1_HELP	X1_PICTURE	X1_IDFIL
          //	2     3			4						5		  		  6					7		8		9			  10			11			12		13			14			15			16			17			18			19			20			21			22			23			24			25			26			27			28			29			30			31			32			33			34			35			36			37 			38		39			40		41			42		43			44
  AAdd(aRegs,{cPerg,"01","Filial De?        ","","","mv_ch1","C",03,0,0,"G","","MV_PAR01","","","","","","","","","","","","","","","","","","","","","","","","","SM0",""})
  AAdd(aRegs,{cPerg,"02","Filial Ate?       ","","","mv_ch2","C",03,0,0,"G","","MV_PAR02","","","","","","","","","","","","","","","","","","","","","","","","","SM0",""})
  AAdd(aRegs,{cPerg,"03","Data De?          ","","","mv_ch3","D",08,0,0,"G","","MV_PAR03","","","","","","","","","","","","","","","","","","","","","","","","","",""})
  AAdd(aRegs,{cPerg,"04","Data Ate?         ","","","mv_ch4","D",08,0,0,"G","","MV_PAR04","","","","","","","","","","","","","","","","","","","","","","","","","",""})
  AAdd(aRegs,{cPerg,"05","Centro Custo De?  ","","","mv_ch5","C",09,0,0,"G","","MV_PAR05","","","","","","","","","","","","","","","","","","","","","","","","","CTT",""})
  AAdd(aRegs,{cPerg,"06","Centro Custo Ate? ","","","mv_ch6","C",09,0,0,"G","","MV_PAR06","","","","","","","","","","","","","","","","","","","","","","","","","CTT",""})
  AAdd(aRegs,{cPerg,"07","Celula De?        ","","","mv_ch7","C",01,0,0,"G","","mv_par07","","","","","","","","","","","","","","","","","","","","","","","","","",""})
  AAdd(aRegs,{cPerg,"08","Celula Ate?       ","","","mv_ch8","C",01,0,0,"G","","mv_par08","","","","","","","","","","","","","","","","","","","","","","","","","",""})

For i:=1 to Len(aRegs)
	If !dbSeek(cPerg+space(len(SX1->X1_GRUPO)-LEN(cPerg))+aRegs[i,2])
		RecLock("SX1",.T.)
		For j:=1 to FCount()
			If j <= Len(aRegs[i])
				FieldPut(j,aRegs[i,j])
			Endif
		Next
		MsUnlock()
	Endif
Next
Return 
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion xAfasta(dDtEntr,dDtSai)
Local nDia      := 0
Local _nSem     := 1
Local nDat      := 0
Local nC
Local cDt 
Local nafa      := 0         
Local ntothoras := 0
Local _cAno     := Strzero(Year(dDtSai),4)
Local _cMes     := Strzero(Month(dDtSai),2)
Local _Turno	:= QRY1->RA_TNOTRAB
Local mSQL 	    := ""
DEFAULT dDtEntr := MV_PAR03
DEFAULT dDtSai  := MV_PAR04

nDat := dDtSai - dDtEntr + 1

If Posicione("RCG",1, xFilial("RCG") + StrZero(Year(MV_PAR03),4) + StrZero(Month(MV_PAR03),2) + QRY1->RA_TNOTRAB, "RCG->RCG_TNOTRAB") == QRY1->RA_TNOTRAB
	_Turno := QRY1->RA_TNOTRAB
Else
	_Turno := "   "
EndIf

For nC := 1 To nDat
	cDt := RetTipoDia(dDtEntr + (nC-1))
           
			DbSelectArea("RCG")
			DbSetOrder(2)
			DbSeek(xFilial("RCG") + SPACE(LEN(RCG_PROCES)) + SPACE(LEN(RCG_PER)) + SPACE(LEN(RCG_SEMANA)) + SPACE(LEN(RCG_ROTEIR)) + _Turno + DTOS(dDtEntr + (nC-1)),.f.)
            
				If RCG->RCG_TIPDIA == "1"
					nAfa++
				EndIf

Next nC

RCG->( dbCloseArea() )

Return(nAfa) 
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function ConvHr(nUteis,nHoras)
	Local NTOTHORAS := 0
	TMPHR->(DBGOTOP())
	WHILE !TMPHR->(eof()) .AND. TMPHR->PJ_TURNO <> QRY1->RA_TNOTRAB
		TMPHR->(DBsKIP())
	ENDDO
	ntothoras := TMPHR->HORAS
	FOR I:=1 TO NUTEIS-1
		NTOTHORAS := SOMAHORAS(NTOTHORAS,TMPHR->HORAS)
	NEXT
	If nUteis < 1 
		nTotHoras := 0
	EndIf
Return NTOTHORAS
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getHe(cMat)
	Local cExtra := "120,121,122,123,127,128,129,130,140,141,142,143" //HORAS EXTRAS
	Local cSQL   := ""
	Local nQtd   := 0
	
	cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
	cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
	cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += "AND PC3.PC_PD IN ("+cExtra+") "
	cSQL += "AND PC3.PC_ABONO NOT IN ('027') "
	cSQL += "UNION ALL "
	cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 "
	cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
	cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += "AND PH3.PH_PD IN ("+cExtra+") "
	cSQL += "AND PH3.PH_ABONO NOT IN ('027') "
	
	TcQuery cSQL NEW Alias "TMPHE"
	DbSelectArea("TMPHE")
	While !Eof()
		nQtd := SomaHoras(nQtd,TMPHE->HORAS)
		DbSkip()
	EndDo
	DbCloseArea("TMPHE")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getFaltas(cMat,lAbonada)      //.T. HORAS FALTAS/ATRASOS ABONADO , .F. HORAS FALTAS/ATRASOS DESCONTADO
	Local cFaltas    := "009,014,019,408,463" //EVENTOS DE DESCONTO
	Local cAbona     := "001,002,003,004,005,006,007,008,009,010,011,012,013,017,018,020,021,022,023,024,025,026,028" //HORAS FALTAS/ATRASOS ABONADO
	Local cNAbona    := "001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,016,017,018,019,020,021,022,023,024,025,026,028" //HORAS FALTAS/ATRASOS DESCONTADO
	Local cSQL       := ""
	Local nQtd       := 0
	DEFAULT lAbonada := .F.
	
	cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
	cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
//	cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += + Iif(Empty(QRY1->RA_DEMISSA) .OR. STOD(QRY1->RA_DEMISSA) >= MV_PAR04,"AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' ","AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+QRY1->RA_DEMISSA+"' ")
	cSQL += "AND PC3.PC_PD IN ("+cFaltas+")"
	cSQL += + Iif(lAbonada, " AND PC3.PC_ABONO IN ("+cAbona+") "," AND PC3.PC_ABONO NOT IN ("+cNAbona+") ")
	cSQL += "UNION ALL "
	cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 "
	cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
//	cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += + Iif(Empty(QRY1->RA_DEMISSA) .OR. STOD(QRY1->RA_DEMISSA) >= MV_PAR04,"AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' ","AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+QRY1->RA_DEMISSA+"' ")
	cSQL += "AND PH3.PH_PD IN ("+cFaltas+")"
	cSQL += + Iif(lAbonada, " AND PH3.PH_ABONO IN ("+cAbona+") "," AND PH3.PH_ABONO NOT IN ("+cNAbona+") ")
	
	TcQuery cSQL NEW Alias "TMPFL"
	DbSelectArea("TMPFL")
	While !Eof()
		nQtd := SomaHoras(nQtd,TMPFL->HORAS)
		DbSkip()
	EndDo
	DbCloseArea("TMPFL")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getTreina(cMat)
	Local cTreina  := "014" //Abono por Treinamento
	Local cSQL     := ""
	Local nQtd     := 0

	cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
	cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
	cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += "AND PC3.PC_ABONO IN ("+cTreina+") "
	cSQL += "UNION ALL "
	cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 "
	cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
	cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
	cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR03)+"' AND '"+DtoS(MV_PAR04)+"' "
	cSQL += "AND PH3.PH_ABONO IN ("+cTreina+")"

	TcQuery cSQL NEW Alias "TMPTR"
	DbSelectArea("TMPTR")
	While !Eof()
		nQtd := SomaHoras(nQtd,TMPTR->HORAS)
		DbSkip()
	EndDo
	DbCloseArea("TMPTR")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
static function rVALOR(aVerbas) //VALOR
	Local aSaveArea := GetArea()
	Local nTotal	:= 0.0
	
	dbSelectArea("SRD")
	dbSetOrder(1) //FILIAL  +MATRICULA  +DT ARQ  +VERBA
	For i:=1 to Len(aVerbas)
		dbSeek(xFilial("SRD")+QRY1->RA_MAT + SubSTR(DTOS(MV_PAR04),1,6) + aVerbas[i]) // dbSeek(xFilial("SRD")+QRY1->RA_MAT+MV_PAR07+aVerbas[i])
		nTotal += SRD->RD_VALOR
	Next
	
	RestArea(aSaveArea)
return nTotal
//----------------------------------------------------------------------------------------------------------------------------------------------------------
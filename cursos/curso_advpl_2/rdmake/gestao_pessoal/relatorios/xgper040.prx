/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Programa: xGper040                                                                                                                                                                      |
|Autor:                                                                                                                                                                                  |
|Data Aplicação:                                                                                                                                                                         |
|Descrição: relatório RESUMO ARGENTINA                                                                                                                                                   |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 13/01/2012                                                                                                                                                              |
|Motivo: HORAS FALTAS/ATRASOS DESCONTADO: Horas ausentes descontadas (evento 009,014,019,408,463), sem código de abono ou diferente de 015 e 016)                                        |
|Resposável: Maintech Information & Solution                                                                                                                                             |
|Validado por: Luciana Benicio de Souza                                                                                                                                                  |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 28/03/2012                                                                                                                                                              |
|Motivo: Inclusão do filtro por CELULA e correção campo HORAS PREVISTAS para admitido/demitido no período                                                                                |
|Resposável: Maintech Information & Solution                                                                                                                                             |
|Validado por: Luciana Souza                                                                                                                                                             |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 09/04/2012                                                                                                                                                              |
|Motivo: correção campo HORAS FALTAS/ATRASOS DESCONTADO                                                                                                                                  |
|Resposável: Maintech Information & Solution                                                                                                                                             |
|Validado por: Luciana Souza                                                                                                                                                             |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 16/04/2012                                                                                                                                                              |
|Motivo: Correção do campo HORAS FALTAS/ATRASOS DESCONTADOS para DEMITIDO no Período                                                                                                     |
|Resposável: Maintech Information & Solution                                                                                                                                             |
|Validado por: Luciana Souza                                                                                                                                                             |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 12/01/2013                                                                                                                                                              |
|Motivo: Unificar Filiais                                                                                                                                                                |
|Resposável: Anadi                                                                                                                                                                       |
|Validado por: Luciana Souza                                                                                                                                                             |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 15/07/2013                                                                                                                                                              |
|Motivo: Incluir campo SALDO BANCO DE HORAS e excluir campos HORAS FALTAS/ATRASOS DESCONTADO e HORAS FALTAS/ATRASOS ABONADO                                                              |
|Resposável: Anadi                                                                                                                                                                       |
|Validado por: Luciana Souza                                                                                                                                                             |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Data Alteração: 16/12/2013                                                                                                                                                              |
|Motivo: Incluir Filtro por Turno                                                                                                                                                        |
|Resposável: Anadi                                                                                                                                                                       |
|Validado por: Claudio Bispo                                                                                                                                                             |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#Include "PROTHEUS.CH"
#INCLUDE "topconn.ch"
//------------------------------------------------------------------------------------------------------------------------------------------------------------
User Function xGpeR040()    //Relatorios\Mensais\Resumo Argentina
PRIVATE cPerg := "xGpeR040"
ValidPerg(cPerg)

if ! Pergunte(cPerg,.T.)
	Return()
Endif

Processa( { || MyRel() } )
Return .t.
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function MyRel()
Local cQry1 :=""
Local cCrLf:=Chr(13)+Chr(10)
Local cMesAnoRef
Local dInicio := mv_par01
Local dFim := mv_par02
Local dDtPesqAf
Local aTotCC := {}

Local yy := 0
Local cTipAfas    := " "
Local aXAfast := {}
Local nTur
Local nAfasta := nFerias := 0

//	Local cArquivo := CriaTrab(,.F.)
Local _csrvapl := ALLTRIM(GetMV("MV_SERVAPL"))
Local _cArqTmp := lower(AllTrim(__RELDIR)+"resumo argentina.csv") //Local _cArqTmp := lower(AllTrim(__RELDIR)+alltrim(cArquivo)+".csv")
Local Matricula1 := " "
Local Matricula2 := " "
dDataRef := mv_par01
cMesAnoRef := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
Private dPerIni := CTOD("")
Private dPerFim := CTOD("")
Private aMarcFun   := {}
Private aTabPadrao := {}
Private aTabCalend := {}
Private aMarcacoes := {}
Private nPosMarc   := 0
Private nLenMarc   := 0
Private nMax       := 0
Private Nachou     := 0
Private ZZ         := 0
Private aHorasP    := {}
Private xExtra     := 0
Private axFalta    :={}
Private cAnoMesRef    := Right(cMesAnoRef,4) + Left(cMesAnoRef,2)

dDtPesqAf:= CTOD("01/" + Right(cAnoMesRef,2) + "/" + Left(cAnoMesRef,4),"DDMMYY")

nHandle := MsfCreate(_cArqTmp,0)

cLinha := "TOTAL DE HORAS TRABALHADAS. PERÍODO DE " + StrZero(Day(MV_PAR01),2) + "/" + StrZero(Month(MV_PAR01),2) + "/" + StrZero(Year(MV_PAR01),4) + " A " + StrZero(Day(MV_PAR02),2) + "/" + StrZero(Month(MV_PAR02),2) + "/" + StrZero(Year(MV_PAR02),4)
fWrite(nHandle, cLinha  + cCrLf)
cLinha := ' '
fWrite(nHandle, cLinha  + cCrLf)

DbSelectArea("SP3") //FERIADOS
DbSetOrder(1)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
IF Select("QRY1") <> 0
	DbSelectArea("QRY1")
	DbCloseArea()
Endif
cQuery := " SELECT RA_FILIAL, RA_MAT, RA_CC, RA_NOME, RA_DEMISSA, RA_TPCONTR, RA_ADMISSA, RA_TNOTRAB, RA_SEQTURN, RA_AFASFGT FROM SRA020 SRA "
cQuery += " WHERE D_E_L_E_T_ = '' "
cQuery += "	AND NOT SRA.RA_CATFUNC in ('A','P') "
cQuery += "	AND NOT SRA.RA_AFASFGT = '5' "
cQuery += "	AND RA_ADMISSA <= '" + DTOS(MV_PAR02) + "' "
cQuery += "	AND (RA_DEMISSA = '' OR RA_DEMISSA >= '" + DTOS(MV_PAR01) + "') "
cQuery += "	AND RA_CC BETWEEN '"+MV_PAR03+"' AND '"+MV_PAR04+"' "
cQuery += "	AND RA__CELULA BETWEEN '"+MV_PAR05+"' AND '"+MV_PAR06+"' "
cQuery += " AND RA_TNOTRAB BETWEEN '"+MV_PAR07+"' AND '"+MV_PAR08+"' "
cQuery += " ORDER BY RA_FILIAL,RA_CC,RA_NOME"

MEMOWRITE("C:\TESTE.txt",cQuery)

TCQUERY cQuery NEW ALIAS "QRY1"

IF Select("TMPHR") <> 0
	DbSelectArea("TMPHR")
	DbCloseArea()
Endif
TCqUERY "SELECT PJ_TURNO , (PJ_HRSTRAB+PJ_HRSTRA2) AS HORAS FROM SPJ020 WHERE PJ_DIA = 2 AND PJ_SEMANA = '01' AND D_E_L_E_T_ = ' ' ORDER BY PJ_TURNO" NEW ALIAS "TMPHR"

DBSELECTAREA("QRY1")
procregua(reccount())
QRY1->(DBGOTOP())
DO WHILE !QRY1->(EOF())
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Nao considera funcionarios admitidos apos o periodo do movimento ³
	//³ e nem os demitidos anterior ao periodo.						     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If MesAno(stod(QRY1->RA_ADMISSA)) <= MesAno(dDtPesqAf) .and. (Empty(QRY1->RA_DEMISSA) .or. MesAno(stod(QRY1->RA_DEMISSA)) >= MesAno(dDtPesqAf))
		yy := Ascan(aTotCC , {|x| x[1] =  QRY1->RA_CC })
		If yy = 0
			SI3->(MsSeek(Xfilial("SI3") + QRY1->RA_CC))
			aadd (aTotCC,;
			{QRY1->RA_CC,;	//01 CENTRO DE CUSTO
			0,;		 		//02 FUNCIONÁRIOS AFASTADOS INSS
			0,;		 		//03 HORAS PREVISTAS
			0,;		 		//04 FUNCIONARIOS EM FERIAS
			0,;		 		//05 HORAS EXTRAS
			0,;		 		//06 HORAS FALTAS/ATRASOS TOTAL
			0,;		 		//07 HORAS EM TREINAMENTO
			0,;		 		//08 TOTAL DE FUNCIONÁRIOS (ANTERIOR)
			0,;		 		//09 ADMITIDO
			0,;		 		//10 DEMITIDO
			0,;		 		//11 HORAS EM FERIAS
			SI3->I3_DESC,;	//12 DESCRIÇÃO CENTRO DE CUSTO
			0,;		 		//13 HORAS AFASTAMENTO INSS
			0,;		 		//14 HORAS FALTAS/ATRASOS DESCONTADO
			0,;		 		//15 HORAS FALTAS/ATRASOS ABONADO
			0,;		 		//16 HORAS EFETIVAS
			0,;		 		//17 SALDO BANCO DE HORAS
			0})
		Endif
		yy := Ascan(aTotCC , {|x| x[1] == QRY1->RA_CC })
		
		If stod(QRY1->RA_ADMISSA) >= MV_PAR01 .And. stod(QRY1->RA_ADMISSA) <= MV_PAR02 //If mesano(stod(QRY1->RA_ADMISSA)) == MesAno(dDtPesqAf)
			aTotCC[yy,9] += 1 //ADMITIDO
		Endif
		
		If (stod(QRY1->RA_DEMISSA)) >= MV_PAR01 .And. (stod(QRY1->RA_DEMISSA)) <= MV_PAR02 //MesAno(stod(QRY1->RA_DEMISSA)) = MesAno(dDtPesqAf)) //demitidos
			cTipAfas := "D"
			aTotCC[yy,10] += 1 //DEMITIDO
		EndIf
		
		DbSelectArea("SR8")
		
		If SR8->(DbSeek(Xfilial("SR8") + QRY1->RA_MAT ))
			
			While !Eof() .And. QRY1->RA_FILIAL + QRY1->RA_MAT == SR8->R8_FILIAL + SR8->R8_MAT
				dinifer := mv_par01 //FIRSTDAY(mv_par02 + 30)
				dfimfer := mv_par02 //LASTDAY(mv_par02 + 30)
				
				If SR8->R8_TIPO $ 'O/P/Q' .and. SR8->R8_DATAFIM >= dinifer .and. SR8->R8_DATAINI <= dfimfer
					nAfasta := 0
					If SR8->R8_TIPO $ 'O/P' .and. (SR8->R8_DATAFIM - SR8->R8_DATAINI) >= 15
						If SR8->R8_DATAINI+15 <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//afastamento comecou antes do mes de calculo e acabou no mes de calculo
							nAfasta += xafasta(dInifer,SR8->R8_DATAFIM)
							cTipAfas := "A"
						Elseif SR8->R8_DATAINI+15 <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//afastamento comecou antes do mes de calculo e acabou depois do mes de calculo
							nAfasta += xafasta(dInifer,dfimfer)
							cTipAfas := "A"
						ElseIf SR8->R8_DATAINI+15 >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //afastamento está no mes de calculo
							nAfasta += xafasta(SR8->R8_DATAINI+15,SR8->R8_DATAFIM)
							cTipAfas := "A"
						ElseIf SR8->R8_DATAINI+15 >= dinifer .and. SR8->R8_DATAINI+14 <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //afastamento comecou no mes de calculo e acabou depois
							nAfasta += xafasta(SR8->R8_DATAINI+15,dfimfer)
							cTipAfas := "A"
						EndIf
					ElseIf SR8->R8_TIPO $ 'Q'
						If SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//afastamento comecou antes do mes de calculo e acabaram no mes de calculo
							nAfasta += xafasta(dInifer,SR8->R8_DATAFIM)
							cTipAfas := "A"
						Elseif SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//afastamento comecou antes do mes de calculo e acabaram depois do mes de calculo
							nAfasta += xafasta(dInifer,dfimfer)
							cTipAfas := "A"
						ElseIf SR8->R8_DATAINI >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //afastamento estao no mes de calculo
							nAfasta += xafasta(SR8->R8_DATAINI,SR8->R8_DATAFIM)
							cTipAfas := "A"
						ElseIf SR8->R8_DATAINI >= dinifer .and. SR8->R8_DATAINI <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //afastamento comecou no mes de calculo e acabaram depois
							nAfasta += xafasta(SR8->R8_DATAINI,dfimfer)
							cTipAfas := "A"
						EndIf
					EndIf
					
					If cTipAfas == 'A'
						Matricula1 := QRY1->RA_MAT
						If Matricula1 <> Matricula2
							aTotCC[yy,2] += 1 //FUNCIONÁRIOS AFASTADOS INSS
							Matricula2 := SR8->R8_MAT
						EndIf
						aTotCC[yy,13] := SomaHoras(aTotCC[yy,13],ConvHr(nAfasta,TMPHR->HORAS)) //HORAS AFASTAMENTO INSS
					EndIf
				EndIf
				
				If SR8->R8_TIPO $ 'F'
					nFerias := 0
					if SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dinifer	.and. SR8->R8_DATAFIM <= dfimfer//as ferias comecaram antes do mes de calculo e acabaram no mes de calculo
						nFerias += xafasta(dInifer,SR8->R8_DATAFIM)
						cTipAfas := "F"
					Elseif SR8->R8_DATAINI <= dinifer .and. SR8->R8_DATAFIM >= dfimfer//as ferias comecaram antes do mes de calculo e acabaram depois do mes de calculo
						nFerias += xafasta(dInifer,dfimfer)
						cTipAfas := "F"
					ElseIf SR8->R8_DATAINI >= dinifer .and.  SR8->R8_DATAFIM <= dfimfer  //as ferias estao no mes de calculo
						nFerias += xafasta(SR8->R8_DATAINI,SR8->R8_DATAFIM)               //29
						cTipAfas := "F"
					ElseIf SR8->R8_DATAINI >= dinifer .and. SR8->R8_DATAINI <= dfimfer .and. SR8->R8_DATAFIM >= dfimfer //as ferias comecaram no mes de calcule e acabaram depois do mes de calculo
						nFerias += xafasta(SR8->R8_DATAINI,dfimfer)
						cTipAfas := "F"
					Else //as ferias estao fora do periodo de calculo
						nFerias += 0
						cTipAfas := " "
					EndIf
					
					If cTipAfas == 'F'
						aTotCC[yy,4]  += 1 //FUNCIONARIOS EM FERIAS
						aTotCC[yy,11] := SomaHoras(aTotCC[yy,11],ConvHr(nFerias,TMPHR->HORAS)) //HORAS EM FERIAS
					EndIf
				EndIf
				
				DbSelectArea("SR8")
				DbSkip()
			Enddo
			DbSelectArea("QRY1")
			
		Else
			dbSelectArea( "QRY1" )
		Endif
		//		testa eventos abonados do ponto eletronico - FALTAS, ATRASOS ETC*/
		aMarcacoes	:= {}
		aTabCalend	:= {}
		axFalta     := {}
		//adet:= TestaPonto()
		
		If (stod(QRY1->RA_ADMISSA)) < MV_PAR01
			aTotCC[yy,8]   += 1  //TOTAL DE FUNCIONÁRIOS (ANTERIOR)
		EndIf
		
		aTotCC[yy,3]   := SomaHoras(aTotCC[yy,3],HrUtil(mv_par01,mv_par02))		//HORAS PREVISTAS
		aTotCC[yy,14]  := SomaHoras(aTotCC[yy,14],getFaltas(QRY1->RA_MAT,.F.))	//HORAS FALTAS/ATRASOS DESCONTADO
		aTotCC[yy,15]  := SomaHoras(aTotCC[yy,15],getFaltas(QRY1->RA_MAT,.T.))	//HORAS FALTAS/ATRASOS ABONADO
		aTotCC[yy,7]   := SomaHoras(aTotCC[yy,7],getTreina(QRY1->RA_MAT))		//HORAS EM TREINAMENTO
		aTotCC[yy,17] := SomaHoras(aTotCC[yy,17],getBanco(QRY1->RA_MAT))		//SALDO BANCO DE HORAS
		
		dbSelectArea( "QRY1" )
		
		_nTotBanco := getBancoHoras(QRY1->RA_MAT) //BANCO DE HORAS       
		aTotMAT[yy,14] := SubHoras(aTotMAT[yy,14],_nTotBanco) //HORAS FALTAS/ATRASOS DESCONTADO
		
		ATotCC[yy,5] := SomaHoras(ATotCC[yy,5],getHe(QRY1->RA_MAT)) //HORAS EXTRAS
		
		/* ---------------------------- fim do ponto eletronico*/
	ENDIF
	
	QRY1->(DbSkip())
	Incproc()
EndDo
ASORT(aTotCC,,, { |x, y| x[1] < y[1] })
zz := 0
nMax := Len(aTotCC)
ProcRegua(nMax)

clinha = "CÓDIGO"							+";"+ ;
"CENTRO DE CUSTO"					+";"+ ;
"TOTAL DE FUNCIONÁRIOS (ANTERIOR)"	+";"+ ;
"ADMITIDO"							+";"+ ;
"DEMITIDO"							+";"+ ;
"TOTAL DE FUNCIONÁRIOS (ATUAL)"	+";"+ ;
"FUNCIONÁRIOS EM FERIAS"			+";"+ ;
"FUNCIONÁRIOS AFASTADOS INSS"		+";"+ ;
"HORAS PREVISTAS"					+";"+ ;
"HORAS EM FERIAS"					+";"+ ;
"HORAS DISPONIVEIS"				+";"+ ;
"HORAS EXTRAS"						+";"+ ;
"HORAS FALTAS/ATRASOS TOTAL"		+";"+ ;
"SALDO POSITIVO BANCO DE HORAS"	+";"+ ;
"SALDO NEGATIVO BANCO DE HORAS"	+";"+ ;
"HORAS EM TREINAMENTO"				+";"+ ;
"HORAS AFASTAMENTO INSS"			+";"+ ;
"HORAS EFETIVAS"					+";"+ ;
"HORAS PAGAS"

fWrite(nHandle, cLinha  + cCrLf)
For zz = 1 to nMax
	cLinha := Alltrim(aTotcc[zz,1]) + ';' + Alltrim(aTotcc[zz,12]) + ';'															//CENTRO DE CUSTO + DESCRIÇÃO CENTRO DE CUSTO
	clinha = clinha + transform(aTotcc[zz,8],"@E 999999") + ';'																		//TOTAL DE FUNCIONÁRIOS (ANTERIOR)
	clinha = clinha + transform(aTotcc[zz,9],"@E 999999") + ';'																		//ADMITIDO
	clinha = clinha + transform(aTotcc[zz,10],"@E 999999") + ';'																	//DEMITIDO
	clinha = clinha + transform(aTotcc[zz,8]+aTotcc[zz,9]-aTotcc[zz,10],"@E 999999") + ';'											//TOTAL DE FUNCIONÁRIOS (ATUAL)
	clinha = clinha + transform(aTotcc[zz,4],"@E 999999") + ';'																		//FUNCIONARIOS EM FERIAS
	clinha = clinha + transform(aTotcc[zz,2],"@E 999999") + ';' 																	//FUNCIONÁRIOS AFASTADOS INSS
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,3],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,3],10,2),2)) + ';'	 	//HORAS PREVISTAS
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,11],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,11],10,2),2)) + ';' 	//HORAS EM FERIAS
	nHDisp := SomaHoras(aTotcc[zz,3],'-'+AllTrim(Str(aTotcc[zz,11])))
	clinha = clinha + Alltrim(Left(Transform(nHDisp,"@E 999999.99"),6) + ":" + Right(StrZero(nHDisp,10,2),2)) + ';'					//HORAS DISPONIVEIS
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,5],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,5],10,2),2)) + ';'		//HORAS EXTRAS

//	nHFalta := SomaHoras(SomaHoras(aTotCC[zz,15],aTotCC[zz,14]),aTotCC[zz,7])
	nHFalta := subHoras(SomaHoras(SomaHoras(aTotCC[zz,15],aTotCC[zz,14]),aTotCC[zz,7]), aTotCC[zz,17])

	if nHFalta < 0
		nHFalta := 0
	endif

	Iif (nHFalta <= nHDisp , aTotCC[zz,6] := nHFalta , aTotCC[zz,6] := nHDisp)
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,6],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,6],10,2),2)) + ';'		//HORAS FALTAS/ATRASOS TOTAL
	If aTotCC[zz,17] >= 0.00
		clinha = clinha + Alltrim(Left(Transform(aTotCC[zz,17],"@E 999999.99"),6) + ":" + Right(StrZero(aTotCC[zz,17],10,2),2)) + ';'	//SALDO POSITIVO BANCO DE HORAS
	Else
		clinha = clinha + Alltrim(Left(Transform(0.00,"@E 999999.99"),6) + ":" + Right(StrZero(0.00,10,2),2)) + ';'
	EndIf
	If aTotCC[zz,17] < 0.00
		clinha = clinha + Alltrim(Left(Transform((aTotCC[zz,17]*-1.00),"@E 999999.99"),6) + ":" + Right(StrZero((aTotCC[zz,17]*-1.00),10,2),2)) + ';'	//SALDO NEGATIVO BANCO DE HORAS
	Else
		clinha = clinha + Alltrim(Left(Transform(0.00,"@E 999999.99"),6) + ":" + Right(StrZero(0.00,10,2),2)) + ';'
	EndIf
	
	//		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,15],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,15],10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS ABONADO
	//		Iif (aTotCC[zz,14] >= nHDisp , aTotCC[zz,14] := nHDisp,)
	//		clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,14],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,14],10,2),2)) + ';' 	//HORAS FALTAS/ATRASOS DESCONTADO
	
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,7],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,7],10,2),2)) + ';'		//HORAS EM TREINAMENTO
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,13],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,13],10,2),2)) + ';' 	//HORAS AFASTAMENTO INSS
	aTotCC[zz,16] := SomaHoras(SomaHoras(SomaHoras(aTotcc[zz,3],'-'+AllTrim(Str(aTotcc[zz,11]))),aTotcc[zz,5]),'-'+AllTrim(Str(SomaHoras(aTotcc[zz,6],aTotcc[zz,13]) )))
	clinha = clinha + Alltrim(Left(Transform(aTotcc[zz,16],"@E 999999.99"),6) + ":" + Right(StrZero(aTotcc[zz,16],10,2),2)) + ';' 	//HORAS EFETIVAS
	nHPagas := SomaHoras(aTotCC[zz,16],aTotcc[zz,15])
	clinha = clinha + Alltrim(Left(Transform(nHPagas,"@E 999999.99"),6) + ":" + Right(StrZero(nHPagas,10,2),2)) + ';'				//HORAS PAGAS
	
	fWrite(nHandle, cLinha  + cCrLf)
	IncProc()
Next
fClose(nHandle)

If ! ApOleClient( 'MsExcel' )
	MsgAlert( 'MsExcel nao instalado')
	Return
Else
	if 'C:' $ __RELDIR        // alterado por Rodrigo Salomão GLPI ID10003
		ShellExecute( "Open" , _cArqTmp ,"", "" , 3 )
	else
		ShellExecute( "Open" , "\\"+_csrvapl+_cArqTmp ,"", "" , 3 )
	endif
EndIf


Return .T.

//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion DiaUtil(dDtEntr,dDtSai)
Local nDia:=0
Local nDat:=0
Local nC
Local cDt
Local nuteis := 0
Local nTur
nDat := dDtSai-dDtEntr

if  dDtEntr < mv_par01 //o inicio das ferias foi anterior ao mv_par01
	dDtEntr := mv_par01
Endif

if dDtSai > mv_par02 //o fim das ferias passou do mv_par02
	dDtSai := mv_par02
Endif
nDat := dDtSai-dDtEntr
dDtEntr:= dDtEntr-1

For nC := 1 To nDat
	cDt:= RetTipoDia(dDtEntr+nC)
	If cDt = "1" //dias trabalhados
		nuteis ++
	ElseIf cDt = "3" //DSR
		nUteis = nUteis
	ElseIf cDt  = "2" //sabado
		
		SPJ->(DbSeek(Xfilial("SPJ") + QRY1->RA_TNOTRAB + QRY1->RA_SEQTURN + "7" ))
		If SPJ->PJ_HRTOTAL > 0
			nUteis ++
		EndIF
		SPJ->(DbSeek(Xfilial("SPJ") + QRY1->RA_TNOTRAB + QRY1->RA_SEQTURN + "2" ))
	Else
		nUteis = nUteis
	EndIf
Next nC

Return(nUteis)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function TestaPonto()
Local cAcessaSPC  := &("{ || " + ChkRH("PONR050","SPH","2") + "}")
Local dInicio     := mv_par01
Local dFim        := mv_par02
Local aAutorizado := {}
Local cCodNAut 	  := "007,009,011,013,017,019,021,033,035,463,461,416,415,414,408" //-- Codigos nao Autorizados
Local cCodAut 	  := "008,010,012,014,018,020,022,032,034" //-- Codigos Autorizados
Local cExtra      := "120,121,122,123,127,128,129,130" //horas extras
Local cCodigos    := ""
Local cFilCompara := SP9->P9_FILIAL
Local aPrevFun    :={}
aDet              := {}
cCodigos := cCodAut + cCodNAut
DbSelectArea("SP9")
DbSeek(cFilCompara)
aAutorizado       := {}
While ! Eof() .AND. SP9->P9_FILIAL = cFilCompara
	If Subs(P9_IDPON,1,3) $ cCodigos
		Aadd(aAutorizado,{Left(P9_CODIGO,3),P9_DESC})
	Endif
	DbSkip()
EndDo
xExtra :=  0
//-- Carrega as Marcacoes do Periodo
IF !GetMarcacoes( @aMarcacoes		,;	//01 -> Marcacoes dos Funcionarios
	@aTabCalend		,;	//02 -> Calendario de Marcacoes
	@aTabPadrao		,;	//03 -> Tabela Padrao
	NIL				,;	//04 -> Turnos de Trabalho
	dPerIni 			,;	//05 -> Periodo Inicial
	dPerFim			,;	//06 -> Periodo Final
	QRY1->RA_FILIAL	,;	//07 -> Filial
	QRY1->RA_MAT		,;	//08 -> Matricula
	SRA->RA_TNOTRAB	,;	//09 -> Turno
	QRY1->RA_SEQTURN	,;	//10 -> Sequencia de Turno
	QRY1->RA_CC		,;	//11 -> Centro de Custo
	"SP8"				,;	//12 -> Alias para Carga das Marcacoes
	.F.    			,;	//13 -> Se carrega Recno em aMarcacoes
	.T.      			,;	//14 -> Se considera Apenas Ordenadas
	.T.      			,;	//15 -> Se Verifica as Folgas Automaticas
	.F.      			,;	//16 -> Se Grava Evento de Folga Automatica Periodo Anterior
	NIL				,;	//17 -> Se Carrega as Marcacoes Automaticas
	NIL				,;	//18 -> Registros de Marcacoes Automaticas que deverao ser Desprezadas
	NIL				,;	//19 -> Bloco para avaliar as Marcacoes Automaticas que deverao ser Desprezadas
	NIL				,;	//20 -> Se Considera o Periodo de Apontamento das Marcacoes
	.F.				 ;	//21 -> Se Efetua o Sincronismo dos Horarios na Criacao do Calendario
	)
	Help(' ',1,'PONSCALEND')
EndIF
//-- Obtem Qtde de Marcacoes
nLenMarc:=Len(aMarcacoes)

aDet := {}

//1 - Data
//2 - Codigo do Evento
//3 - Descricao do Evento
//4 - Descricao do Abono
//5 - Descricao do Abono
//6 - Quantidade de horas Abonadas
//7 - Marcacoes

dbSelectArea( "SPH" )
DbSetOrder(2)
If DbSeek(QRY1->RA_Filial + QRY1->RA_Mat + Dtos(dInicio) )
	While !Eof() .And. SPH->PH_Filial+SPH->PH_Mat == QRY1->RA_filial+QRY1->RA_Mat   .and. SPH->PH_DATA <= dFim
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Consiste controle de acessos e filiais validas               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Eval(cAcessaSPC)
			SPH->(dbSkip())
			Loop
		EndIf
		
		//-- Verifica o Periodo So	licitado
		If Empty(SPH->PH_DATA) .OR. SPH->PH_DATA < dInicio .OR. SPH->PH_DATA > dFim
			DbSkip()
			Loop
		Endif
		
		
		//-- Utiliza o codigo informado qdo houver
		cPD := If(Empty(SPH->PH_PDI),SPH->PH_PD,SPH->PH_PDI)
		
		//-- Verifica se e um codigo contido na relacao de codigos
		//-- definidas segundo avariavel cCodigos
		nPos := Ascan(aAutorizado,{ |x| x[1] = cPD })
		//-- Se o Codigo do Evento apontado  eh Valido
		If nPos > 0
			
			//-- Obtem a quantidade do evento apontando
			xQuant := If(SPH->PH_QUANTI>0,SPH->PH_QUANTI,SPH->PH_QUANTC)
			
			aJustifica := {}
			
			//-- Verifica se existe abonos e posiciona registro de abono
			fAbonos(SPH->PH_DATA, aAutorizados[nPos,1],,@aJustifica,SPH->PH_TPMARCA,SPH->PH_CC)
			
			//-- Sintetiza por Evento
			If (nPosDet:=Ascan(aDet,{ |x| x[1] = cPD })) > 0
				aDet[nPosDet,3]:=SomaHoras(aDet[nPosDet,3],xQuant)
			Else
				aAdd(aDet,{ aAutorizado[nPos,1], aAutorizado[nPos,2] ,	xQuant})
			Endif
			If !EMPTY(SPH->PH_ABONO) .AND. SPH->PH_QTABONO > 0 //SOMA EVENTOS ABONADOS
				If Len(aXFalta) >  0
					aXFalta [1,2] += xQuant
				Else
					aAdd(aXFalta,{0,xQuant})
				Endif
			Else       //SOMA EVENTOS NAO ABONADOS
				If Len(aXFalta) >  0
					aXFalta [1,1] += xQuant
				Else
					aAdd(aXFalta,{xQuant,0})
				Endif
			EndIF
		Else
			If  cPd $ cExtra
				xExtra += If(SPH->PH_QUANTI>0,SPH->PH_QUANTI,SPH->PH_QUANTC)
			EndIF
		Endif
		DbSkip()
	EndDo
Endif

Return(aDet)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function fChkSX1( dPerIni , dPerFim , cPerg )

Local aAreaSX1	:= SX1->( GetArea() )
Local dVar      := Ctod("//")

SX1->(dbSetOrder(1))

IF SX1->(dbSeek(cPerg+"14",.F.))
	dVar := Ctod(SX1->X1_CNT01,'ddmmyy')
	IF dVar < dPerIni .or. dVar > dPerFim
		RecLock("SX1")
		SX1->X1_CNT01 := Dtoc(dPerIni)
		SX1->( MsUnlock() )
	EndIF
	SX1->( dbSkip() )
	IF SX1->( X1_GRUPO + X1_ORDEM ) == cPerg+"15"
		dVar := Ctod(SX1->X1_CNT01,'ddmmyy')
		IF dVar < dPerIni .Or. dVar > dPerFim
			RecLock("SX1")
			SX1->X1_CNT01 := Dtoc(dPerFim)
			SX1->( MsUnlock() )
		EndIF
	EndIF
EndIF

RestArea( aAreaSX1 )

Return( NIL )
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion HrUtil(dDtEntr,dDtSai)
Local nDia      := 0
Local _nSem     := 1
Local nDat      := 0
Local nUteis    := 0
Local nC
Local cDt
Local ntothoras := 0
Local _cAno     := Strzero(Year(dDtSai),4)
Local _cMes     := Strzero(Month(dDtSai),2)
Local _Turno	:= QRY1->RA_TNOTRAB //Posicione("SPF",1,"02" + QRY1->RA_MAT + DTOS(MV_PAR01),"PF_TURNOPA") //_dTurno,"PF_TURNOPA")

If STOD(QRY1->RA_ADMISSA) > dDtEntr //admissão dentro do período selecionado
	dDtEntr := STOD(QRY1->RA_ADMISSA)
EndIf

If !eMPTY(QRY1->RA_DEMISSA) .and. STOD(QRY1->RA_DEMISSA) < dDtSai //demissão dentro do período selecionado
	dDtSai := STOD(QRY1->RA_DEMISSA)
EndIf

nDat := dDtSai - dDtEntr + 1

If nDat == 0
	nDat := 1
EndIf

If Posicione("RCG",1, xFilial("RCG") + StrZero(Year(MV_PAR01),4) + StrZero(Month(MV_PAR01),2) + QRY1->RA_TNOTRAB, "RCG->RCG_TNOTRAB") == QRY1->RA_TNOTRAB
	_Turno := QRY1->RA_TNOTRAB
Else
	_Turno := "   "
EndIf

For nC  := 1 To nDat
	cDt := RetTipoDia(dDtEntr + (nC-1))
	
	DbSelectArea("RCG")
	DbSetOrder(2)
	DbSeek(xFilial("RCG") + SPACE(LEN(RCG_PROCES)) + SPACE(LEN(RCG_PER)) + SPACE(LEN(RCG_SEMANA)) + SPACE(LEN(RCG_ROTEIR)) + _Turno + DTOS(dDtEntr + (nC-1)),.f.)
	
	If RCG->RCG_TIPDIA == "1"
		nuteis++
	EndIf
	
Next nC

TMPHR->(DBGOTOP())
WHILE !TMPHR->(eof()) .AND. TMPHR->PJ_TURNO <> QRY1->RA_TNOTRAB
	TMPHR->(DBSKIP())
ENDDO
ntothoras := TMPHR->HORAS
FOR I:=1 TO NUTEIS-1
	NTOTHORAS := SOMAHORAS(NTOTHORAS,TMPHR->HORAS)
NEXT
If nUteis < 1
	nTotHoras := 0
EndIf
Return(nTotHoras)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function ValidPerg() //CRIACAO DA PERGUNTA
Local _sAlias := Alias()
Local aRegs := {}
Local i,j

dbSelectArea("SX1")
dbSetOrder(1)
//cPerg := PADR(cPerg,6)
//X1_GRUPO	X1_ORDEM	X1_PERGUNT				X1_PERSPA  		X1_PERENG 		X1_VARIAVL	X1_TIPO	X1_TAMANHO	X1_DECIMAL	X1_PRESEL	X1_GSC	X1_VALID	X1_VAR01	X1_DEF01	X1_DEFSPA1	X1_DEFENG1	X1_CNT01	X1_VAR02	X1_DEF02	X1_DEFSPA2	X1_DEFENG2	X1_CNT02	X1_VAR03	X1_DEF03	X1_DEFSPA3	X1_DEFENG3	X1_CNT03	X1_VAR04	X1_DEF04	X1_DEFSPA4	X1_DEFENG4	X1_CNT04	X1_VAR05	X1_DEF05	X1_DEFSPA5	X1_DEFENG5	X1_CNT05	X1_F3	X1_PYME	X1_GRPSXG	X1_HELP	X1_PICTURE	X1_IDFIL
//	2     3			4						5		  		  6					7		8		9			  10			11			12		13			14			15			16			17			18			19			20			21			22			23			24			25			26			27			28			29			30			31			32			33			34			35			36			37 			38		39			40		41			42		43			44
AAdd(aRegs,{cPerg,"01","Data De?          ","","","mv_ch1","D",08,0,0,"G","","mv_par01","","","","","","","","","","","","","","","","","","","","","","","","","",""})
AAdd(aRegs,{cPerg,"02","Data Ate?         ","","","mv_ch2","D",08,0,0,"G","","mv_par02","","","","","","","","","","","","","","","","","","","","","","","","","",""})
AAdd(aRegs,{cPerg,"03","Centro Custo De?  ","","","mv_ch3","C",09,0,0,"G","","mv_par03","","","","","","","","","","","","","","","","","","","","","","","","","CTT",""})
AAdd(aRegs,{cPerg,"04","Centro Custo Ate? ","","","mv_ch4","C",09,0,0,"G","","mv_par04","","","","","","","","","","","","","","","","","","","","","","","","","CTT",""})
AAdd(aRegs,{cPerg,"05","Celula De?        ","","","mv_ch5","C",02,0,0,"G","","mv_par05","","","","","","","","","","","","","","","","","","","","","","","","","",""})
AAdd(aRegs,{cPerg,"06","Celula Ate?       ","","","mv_ch6","C",02,0,0,"G","","mv_par06","","","","","","","","","","","","","","","","","","","","","","","","","",""})
AAdd(aRegs,{cPerg,"07","Turno De?         ","","","mv_ch7","C",03,0,0,"G","","mv_par07","","","","","","","","","","","","","","","","","","","","","","","","","SR6",""})
AAdd(aRegs,{cPerg,"08","Turno De?         ","","","mv_ch7","C",03,0,0,"G","","mv_par08","","","","","","","","","","","","","","","","","","","","","","","","","SR6",""})

For i:=1 to Len(aRegs)
	If !dbSeek(cPerg+space(len(SX1->X1_GRUPO)-LEN(cPerg))+aRegs[i,2])
		RecLock("SX1",.T.)
		For j:=1 to FCount()
			If j <= Len(aRegs[i])
				FieldPut(j,aRegs[i,j])
			Endif
		Next
		MsUnlock()
	Endif
Next
Return
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static FuncTion xAfasta(dDtEntr,dDtSai)
Local nDia      := 0
Local _nSem     := 1
Local nDat      := 0
Local nC
Local cDt
Local nafa      := 0
Local ntothoras := 0
Local _cAno     := Strzero(Year(dDtSai),4)
Local _cMes     := Strzero(Month(dDtSai),2)
Local _Turno	:= QRY1->RA_TNOTRAB
Local mSQL 	    := ""
DEFAULT dDtEntr := MV_PAR01
DEFAULT dDtSai  := MV_PAR02

nDat := dDtSai - dDtEntr + 1

If Posicione("RCG",1, xFilial("RCG") + StrZero(Year(MV_PAR01),4) + StrZero(Month(MV_PAR01),2) + QRY1->RA_TNOTRAB, "RCG->RCG_TNOTRAB") == QRY1->RA_TNOTRAB
	_Turno := QRY1->RA_TNOTRAB
Else
	_Turno := "   "
EndIf

For nC := 1 To nDat
	cDt := RetTipoDia(dDtEntr + (nC-1))
	
	DbSelectArea("RCG")
	DbSetOrder(2)
	DbSeek(xFilial("RCG") + SPACE(LEN(RCG_PROCES)) + SPACE(LEN(RCG_PER)) + SPACE(LEN(RCG_SEMANA)) + SPACE(LEN(RCG_ROTEIR)) + _Turno + DTOS(dDtEntr + (nC-1)),.f.)
	
	If RCG->RCG_TIPDIA == "1"
		nAfa++
	EndIf
	
Next nC

RCG->( dbCloseArea() )

Return(nAfa)
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function ConvHr(nUteis,nHoras)
Local NTOTHORAS := 0
TMPHR->(DBGOTOP())
WHILE !TMPHR->(eof()) .AND. TMPHR->PJ_TURNO <> QRY1->RA_TNOTRAB
	TMPHR->(DBsKIP())
ENDDO
ntothoras := TMPHR->HORAS
FOR I:=1 TO NUTEIS-1
	NTOTHORAS := SOMAHORAS(NTOTHORAS,TMPHR->HORAS)
NEXT
If nUteis < 1
	nTotHoras := 0
EndIf
Return NTOTHORAS
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getHe(cMat)
Local cExtra := "120,121,122,123,127,128,129,130,140,141,142,143" //HORAS EXTRAS
Local cSQL   := ""
Local nQtd   := 0

IF Select("TMPHE") <> 0
	DbSelectArea("TMPHE")
	DbCloseArea()
Endif
cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += "AND PC3.PC_PD IN ("+cExtra+") "
cSQL += "AND PC3.PC_ABONO NOT IN ('027') "
cSQL += "AND PC3.PC_FILIAL = '" + QRY1->RA_FILIAL + "' "
cSQL += "UNION ALL "
cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 "
cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
cSQL += "AND PH3.PH_FILIAL = '" + QRY1->RA_FILIAL + "' "
cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += "AND PH3.PH_PD IN ("+cExtra+") "
cSQL += "AND PH3.PH_ABONO NOT IN ('027') "

TcQuery cSQL NEW Alias "TMPHE"
DbSelectArea("TMPHE")
While !Eof()
	nQtd := SomaHoras(nQtd,TMPHE->HORAS)
	DbSkip()
EndDo
DbCloseArea("TMPHE")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getFaltas(cMat,lAbonada)      //.T. HORAS FALTAS/ATRASOS ABONADO , .F. HORAS FALTAS/ATRASOS DESCONTADO
Local cFaltas    := "009,014,019,408,463" //EVENTOS DE DESCONTO
Local cAbona     := "001,002,003,004,005,006,007,008,009,010,011,012,013,017,018,020,021,022,023,024,025,026,028" //HORAS FALTAS/ATRASOS ABONADO
Local cNAbona    := "001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,016,017,018,019,020,021,022,023,024,025,026,028" //HORAS FALTAS/ATRASOS DESCONTADO
Local cSQL       := ""
Local nQtd       := 0
DEFAULT lAbonada := .F.

IF Select("TMPFL") <> 0
	DbSelectArea("TMPFL")
	DbCloseArea()
Endif
cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
cSQL += "AND PC3.PC_FILIAL = '" + QRY1->RA_FILIAL + "' "
//	cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += + Iif(Empty(QRY1->RA_DEMISSA) .OR. STOD(QRY1->RA_DEMISSA) >= MV_PAR02," AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "," AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+QRY1->RA_DEMISSA+"' ")
cSQL += " AND PC3.PC_PD IN ("+cFaltas+")"
cSQL += + Iif(lAbonada, " AND PC3.PC_ABONO IN ("+cAbona+") "," AND PC3.PC_ABONO NOT IN ("+cNAbona+") ")
cSQL += "UNION ALL "
cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 " 
cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
cSQL += "AND PH3.PH_FILIAL = '" + xFilial() + "' "
cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
cSQL += "AND PH3.PH_FILIAL = '" + QRY1->RA_FILIAL + "' "
//	cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += + Iif(Empty(QRY1->RA_DEMISSA) .OR. STOD(QRY1->RA_DEMISSA) >= MV_PAR02,"AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' ","AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+QRY1->RA_DEMISSA+"' ")
cSQL += "AND PH3.PH_PD IN ("+cFaltas+")"
cSQL += + Iif(lAbonada, " AND PH3.PH_ABONO IN ("+cAbona+") "," AND PH3.PH_ABONO NOT IN ("+cNAbona+") ")

TcQuery cSQL NEW Alias "TMPFL"
DbSelectArea("TMPFL")
While !Eof()
	nQtd := SomaHoras(nQtd,TMPFL->HORAS)
	DbSkip()
EndDo
DbCloseArea("TMPFL")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getTreina(cMat)
Local cTreina  := "014" //Abono por Treinamento
Local cSQL     := ""
Local nQtd     := 0

IF Select("TMPTR") <> 0
	DbSelectArea("TMPTR")
	DbCloseArea()
Endif

cSQL := "SELECT PC_MAT AS MATRICULA,  PC_DATA AS DATA, PC_PD AS VERBA, PC_ABONO AS ABONO, PC_QUANTC AS HORAS FROM SPC020 AS PC3 "
cSQL += "WHERE PC3.D_E_L_E_T_ = ' ' "
cSQL += "AND PC3.PC_MAT = '"+cMat+"' "
cSQL += "AND PC3.PC_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += "AND PC3.PC_ABONO IN ("+cTreina+") "
cSQL += "AND PC3.PC_FILIAL = '" + QRY1->RA_FILIAL + "' "
cSQL += "UNION ALL "
cSQL += "SELECT PH_MAT AS MATRICULA,  PH_DATA AS DATA, PH_PD AS VERBA, PH_ABONO AS ABONO, PH_QUANTC AS HORAS FROM SPH020 AS PH3 "
cSQL += "WHERE PH3.D_E_L_E_T_ = ' ' "
cSQL += "AND PH3.PH_FILIAL = '" + QRY1->RA_FILIAL + "' "
cSQL += "AND PH3.PH_MAT = '"+cMat+"' "
cSQL += "AND PH3.PH_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
cSQL += "AND PH3.PH_ABONO IN ("+cTreina+")"

TcQuery cSQL NEW Alias "TMPTR"
DbSelectArea("TMPTR")
While !Eof()
	nQtd := SomaHoras(nQtd,TMPTR->HORAS)
	DbSkip()
EndDo
DbCloseArea("TMPTR")
Return nQtd
//------------------------------------------------------------------------------------------------------------------------------------------------------------
Static Function getBanco(cMat)  //Calcula o saldo do Banco de Horas
Local cSQL      := ""
Local nQtd      := 0
nSaldo:= nSaldoAnt := nValor := 0
dDataAux  := CTOD("  /  /  ")

_cSQL := " Select PI_FILIAL,PI_MAT,PI_DATA,PI_PD,PI_STATUS,PI_QUANT,P9_TIPOCOD From " + RetSqlName("SPI") + " _PI "
_cSQL += " Inner Join " + RetSqlName("SP9") + " _P9 on P9_FILIAL = '" + xFilial("SP9") + "' And P9_CODIGO = PI_PD And _P9.D_E_L_E_T_ = ' ' "
_cSQL += " Where PI_MAT = '" + cMat + "' And PI_DATA <= '" + DTOS(MV_PAR02) + "' And _PI.D_E_L_E_T_ = ' ' and PI_FILIAL = '" + QRY1->RA_FILIAL + "' "
_cSQL += " Order By PI_FILIAL,PI_MAT,PI_DATA,PI_PD "

_cSQL := ChangeQuery(_cSQL)

If Select("xPI") > 0
	DbSelectArea("xPI")
	DbCloseArea()
EndIf

dbUseArea( .T., "TOPCONN", TCGENQRY(,,_cSQL),"xPI", .T., .T.)

DbSelectArea("xPI")
DbGoTop()

While !Eof()
	If xPI->P9_TIPOCOD $  "1/3"
		
		nValor 	  := IIF(xPI->PI_STATUS == "B",0,xPI->PI_QUANT)
		dDataAux  := IIF(Empty(nValor), dDataAux, STOD(xPI->PI_DATA)) //Para valor nao nulo considera a Data para Referencia do Saldo
		nSaldoAnt := __TimeSum(nSaldoAnt,nValor)
		
	Else
		
		nValor 	  := IIF(xPI->PI_STATUS == "B",0,xPI->PI_QUANT)
		dDataAux  := IIF(Empty(nValor), dDataAux, STOD(xPI->PI_DATA)) //Para valor nao nulo considera a Data para Referencia do Saldo
		nSaldoAnt := __TimeSub(nSaldoAnt,nValor)
		
	Endif
	nSaldo := nSaldoAnt
	
	DbSelectArea("xPI")
	DbSkip()
	
EndDo
Return nSaldo


Static Function getBancoHoras(cMat)  
	Local cBanco:= "999" //EVENTOS DE BANCO DE HORAS  
	Local nQtd	:= 0
	
	cSQL := "SELECT PI_QUANT AS HORAS FROM SPI020 AS SPI "
	cSQL += "WHERE SPI.D_E_L_E_T_ <> '*' "
	cSQL += "AND SPI.PI_MAT = '"+cMat+"' "
	cSQL += "AND SPI.PI_PD IN ("+cBanco+")"
	cSQL += "AND SPI.PI_FILIAL = '"+QRY1->RA_FILIAL+"' "
//	cSQL += "AND SPI.PI_STATUS <> 'B' "
	cSQL += "AND SPI.PI_DATA BETWEEN '"+DtoS(MV_PAR01)+"' AND '"+DtoS(MV_PAR02)+"' "
	
	TcQuery cSQL NEW Alias "TMPSPI"
	DbSelectArea("TMPSPI")
	While !Eof()
		nQtd := SomaHoras(nQtd,TMPSPI->HORAS)
		DbSkip()
	EndDo
	DbCloseArea("TMPSPI")
Return nQtd


//------------------------------------------------------------------------------------------------------------------------------------------------------------